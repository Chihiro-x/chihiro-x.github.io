<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python常用模块记录</title>
      <link href="/2020/06/07/python-xue-xi-ji-lu/"/>
      <url>/2020/06/07/python-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="零散知识"><a href="#零散知识" class="headerlink" title="零散知识"></a>零散知识</h1><h2 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h2><p>用来处理异常，运行代码时有时会出现各种各样的错误，致使解析器中断执行，并提示xxxxxxErorr的提示，后面跟具体的错误的描述，这被称为是引发了异常。其实异常告诉我们的是遇到了什么类型的错误。xxxxErorr就是python内置的异常类型。每一种异常类型，都有它自己的错误信息。出现异常程序终止。其它有些异常类型不影响代码的功能，而又不想让异常中断执行时，就要对异常进行处理，而不让他中断程序：</p><p>例如：有一个字典里面存放光头强的信息，想取到它的资料，但具体都有什么资料我们不知道，如果输入的键不存在就会引发异常而中断执行。致使后面的代码也为无法执行。</p><pre class=" language-python"><code class="language-python">information <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'光头强'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行结果光头强Traceback (most recent call last):  File "/home/chihiro/Project/PyCharmProject/text.py", line 3, in &lt;module>    print(information['sex'])KeyError: 'sex'"""</span></code></pre><p>那么就要捕获这些异常，绕过它，能让下面的代码继续运行。python提供了try语句来实现这些功能。</p><p>语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生异常的代码<span class="token keyword">except</span> 异常类型：    捕获的异常后要执行的代码</code></pre><p><strong>示例：</strong></p><pre class=" language-python"><code class="language-python">information <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'光头强'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sex不存在"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行结果光头强sex不存在20"""</span></code></pre><p><strong>捕获所有异常</strong>：</p><p>引发异常的xxxxErorr都是python异常的类型。python中所有异常类型都是基类Exception的基类。那么在写代码的时候不用指定异常的具体类型，只要捕获基类就等于捕获了所有的异常，但输出的是具体的异常信息，这很有利于在大范围内找到具体的错误。也就是你不知道会产生什么样的错误类型，Exception是万能的。</p><p>示例：</p><pre class=" language-python"><code class="language-python">information <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'光头强'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sex不存在"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">"""运行结果光头强&lt;class 'KeyError'>sex不存在20"""</span></code></pre><p><strong>异常里的else子句</strong>：</p><p>else子句是可选的，如果使用，必须放在所有的except子句之后。它是在try子句没有发生异常的情况执行。</p><pre class=" language-python"><code class="language-python">information <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'光头强'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"光头强是伐木工"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行结果光头强光头强是伐木工"""</span></code></pre><p><strong>finally子句</strong> </p><p>写在try语句的最后。不管 try 子句里面是否有异常，finally 子句都会执行。</p><pre class=" language-python"><code class="language-python">information <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'光头强'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sex不存在"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>information<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调研结束"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行结果光头强&lt;class 'KeyError'>sex不存在20调研结束"""</span></code></pre><h2 id="多线程，多进程，协程"><a href="#多线程，多进程，协程" class="headerlink" title="多线程，多进程，协程"></a>多线程，多进程，协程</h2><p><strong>进程</strong></p><p>进程就是正在运行的程序，比如你的系统现在运行着的QQ就是一个进程，一旦「QQ」运行起来系统就会分配给「QQ」</p><p>内存和资源。<strong>单进程</strong>就是你的电脑只能做一个事情，比如打开啦QQ就不能再打开微信啦，但是现在可以看到你的电脑又是玩游戏，又是听音乐，这就是<strong>多线程</strong>，在同一段时间里可以’同时’执行多个任务。</p><p><strong>线程</strong></p><p>在一个进程里可以执行多个任务，在这里的每一个任务就是一个线程，线程可以说是程序用CPU的一个基本单元，所以一个程序里如果只是单一的一个执行路径，呢他就是单线程；如果程序中有多个执行路径呢他就是多线程。</p><p><strong>并行</strong></p><p>一个单核的CPU一次只能执行一个进程，多核的CPU就可以同时执行多个进程，这就是并行。在某一个时间段里可以同时执行多个进程。</p><p><strong>并发</strong></p><p>比如在双十一的呢天晚上12：00会有很多人在这个时间点上秒杀某一个商品。在某一时间点上可以同时执行多个进程。</p><p><strong>协程</strong></p><p>协程也叫做微线程，在一个线程里面可以执行多个函数，线程和进程是通过系统调度的，而微线程则不需要，可以根据需要自己调度因为微线程是函数之间在切换所以开销很小。</p><p><strong>互斥锁</strong></p><p>进程和进程之间是相互独立的，而一个进程里的多个线程，这些线程共享一个空间，这个时候线程就要搞事情了，毕竟一块蛋糕被共享了谁都想多分一点，就挤破头的想要抢占多一点资源；这样数据就不安全了所以就有了互斥锁。</p><hr><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Python中，一个.py文件就称之为一个模块（Module）。在Python中用关键字<strong>import</strong>来引入某个模块，比如要引用模块<code>random</code>，就可以在文件最开始的地方用<code>import random</code>来引入。在调用random模块中的函数时，必须这样引用：如<code>random.randint()</code>Python的from语句让你从模块中导入一个指定的部分到当前命名空间中，例如，要导入模块random的randint()函数，使用如下语句<code>from ranfom import randint</code></p><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>random库是用于产生并运用随机数的标准库</p><h3 id="randint"><a href="#randint" class="headerlink" title="randint()"></a>randint()</h3><p>生成指定区间内的随机整数。</p><p><strong>示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""生成1～10之间的随机整数"""</span><span class="token keyword">import</span> random<span class="token keyword">print</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="seed"><a href="#seed" class="headerlink" title="seed()"></a>seed()</h3><p>主要是利用种子去产生一个随机数序列，指定的种子对应指定的随机数序列，如果不对种子赋值或者不调用seed函数，默认使用当前的时间作为种子去产生一个随机数序列</p><p><strong>示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""不设置种子运行第一次结果0.7016987358817125运行第二次结果0.7271754857060891"""</span><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""产生种子5对应的序列第一次运行结果0.6229016948897019第二次运行结果0.6229016948897019"""</span><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="random-1"><a href="#random-1" class="headerlink" title="random()"></a>random()</h3><p>生成0～1之间的随机小数</p><p><strong>示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="requests"><a href="#requests" class="headerlink" title="requests()"></a>requests()</h2><p>用来做网页内容的解析</p><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p><strong>GET请求</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsrequests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.sqlsec.com"</span><span class="token punctuation">)</span></code></pre><p><strong>POST请求</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token string">"Login"</span><span class="token punctuation">:</span> <span class="token string">"Login"</span><span class="token punctuation">,</span>    <span class="token string">"user_token"</span><span class="token punctuation">:</span> <span class="token string">"3370d41cf95f4e9b08360f5fe9316325"</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://192.168.31.54:222/login.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></code></pre><p><strong>其他HTTP请求</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsrequests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/put'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/delete'</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">)</span></code></pre><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token string">"直接将参数拼接在URL后面"</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://192.168.31.54:222/Less-1?id=1"</span><span class="token punctuation">)</span><span class="token string">"使用关键字params,等同于http://192.168.31.54:222/Less-1?id=1"</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://192.168.31.54:222/Less-1"</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token string">"使用data,以表单的形式传递参数（参数不会拼接到 URL 后面）"</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://192.168.31.54:222/Less-1"</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token string">"添加headers"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0"</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://192.168.31.54:222"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></code></pre><h3 id="获取响应内容"><a href="#获取响应内容" class="headerlink" title="获取响应内容"></a>获取响应内容</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsre <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.sqlsec.com"</span><span class="token punctuation">)</span><span class="token string">"获取服务器响应文本内容"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token string">"获取服务器文本响应内容编码格式"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token string">"获取字节响应内容"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token string">"获取响应码"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token string">"获取响应头"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>readers<span class="token punctuation">)</span></code></pre><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><p>在 Python 中，我们可以使用内置的 re 模块来使用正则表达式。</p><h3 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h3><p>语法：</p><p><code>re.match(&#39;匹配规则&#39;,&#39;需要过滤的内容&#39;)</code></p><p><strong>示例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""提取结果123"""</span><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token string">"hello 123 python"</span>re <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">"^he.*\s(\d+)\s.*on$"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">""".*？是我们在匹配过程中最常使用到的表示的就是匹配任意字符但是.*？的 . 代表所有的单个字符除了 \n \如果我们的字符串有换行了怎么办呢？这时候使用re.S,使 . 匹配包括换行在内的所有字符"""</span><span class="token keyword">import</span> recontent <span class="token operator">=</span> r"hello \<span class="token number">123</span> python"re <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">"^he.*(\d{3}).*on$"</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>注：<code>re.group(N)</code> 返回第N组括号匹配的字符，而<code>re.group() == re.group(0) == 所有匹配的字符</code>，<code>re.groups()</code>返回所有括号匹配的字符。</p><h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h3><p>直接去扫描字符串，然后把匹配成功的地一个结果返回给你。</p><p>语法：</p><p><code>re.search(&#39;匹配规则&#39;,&#39;待扫描的内容&#39;)</code></p><p><strong>示例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token string">"提取结果123"</span><span class="token keyword">import</span> recontent <span class="token operator">=</span> r"hello \<span class="token number">123</span> python"re <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^he.*(\d{3}).*on$"</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h3><p>通过它我们就能轻松的获取所有匹配的内容了</p><p>语法：</p><p><code>re.findall(&#39;匹配规则&#39;,&#39;待查找的内容&#39;)</code></p><p><strong>示例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token string">"提取结果['123', '456', '789']"</span><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""hello 123 python;hello 456 python;hello 789 python;"""</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'he.*?(\d+)\s.*?n;'</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h3><p>把匹配到的内容替换为其他内容</p><p>语法：</p><p><code>re.sub(&#39;匹配规则&#39;,&#39;替换为&#39;,&#39;待查找的内容&#39;)</code></p><p><strong>示例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token string">"提取结果999 999 999"</span><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""hello 123 python;hello 456 python;hello 789 python;"""</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'he.*?(\d+)\s.*?n;'</span><span class="token punctuation">,</span> <span class="token string">'999'</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h3><p>这个主要就是把我们的匹配符封装一下</p><p><strong>示例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token string">"hello 123 python"</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"^he.*\s(\d+)\s.*on$"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>re <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>可以从 HTML 或 XML 文件中提取数据</p><p>首先写一段HTML代码用来练习</p><pre class=" language-python"><code class="language-python"></code></pre><p>示例：</p><pre class=" language-python"><code class="language-python"></code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>Python3 中可以使用 json 模块来对 JSON 数据进行编解码</p><h3 id="loads"><a href="#loads" class="headerlink" title="loads()"></a>loads()</h3><p>将json数据转化为python对象是这样的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonjsondata <span class="token operator">=</span> <span class="token triple-quoted-string string">'''{"Uin":0,"UserName":"@c482d142bc698bc3971d9f8c26335c5c","NickName":"8","DisplayName":"","ChatRoomId":0,"KeyWord":"che","EncryChatRoomId":"","IsOwner":0}'''</span>friend <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jsondata<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>friend<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行结果{'Uin': 0, 'UserName': '@c482d142bc698bc3971d9f8c26335c5c', 'NickName': '8', 'DisplayName': '', 'ChatRoomId': 0, 'KeyWord': 'che', 'EncryChatRoomId': '', 'IsOwner': 0}"""</span></code></pre><h3 id="dumps"><a href="#dumps" class="headerlink" title="dumps()"></a>dumps()</h3><p>将python对象转换为json</p><pre class=" language-python"><code class="language-python"><span class="token string">"将上面输出的结果转换为json"</span><span class="token keyword">import</span> jsondata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Uin'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'UserName'</span><span class="token punctuation">:</span> <span class="token string">'@c482d142bc698bc3971d9f8c26335c5c'</span><span class="token punctuation">,</span>    <span class="token string">'NickName'</span><span class="token punctuation">:</span> <span class="token string">'8'</span><span class="token punctuation">,</span>    <span class="token string">'DisplayName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'ChatRoomId'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'KeyWord'</span><span class="token punctuation">:</span> <span class="token string">'che'</span><span class="token punctuation">,</span>    <span class="token string">'EncryChatRoomId'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'IsOwner'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行结果{"Uin": 0, "UserName": "@c482d142bc698bc3971d9f8c26335c5c", "NickName": "8", "DisplayName": "", "ChatRoomId": 0, "KeyWord": "che", "EncryChatRoomId": "", "IsOwner": 0}"""</span></code></pre><h2 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h2><p>多线程操作模块</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>Thread 类提供了如下的 <code>__init__()</code> 构造器，可以用来创建线程：<code>__init__(self, group=None, target=None, name=None, args=(), kwargs=None, *,daemon=None)</code></p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>target</td><td>线程调用的对象，就是目标函数</td></tr><tr><td>name</td><td>为线程起一个名字(线程的名字)如果没有赋值，默认为“Thread-N” 的形式</td></tr><tr><td>args</td><td>为目标函数传递实参，元组</td></tr><tr><td>kwargs</td><td>为目标函数传递关键字参数，字典</td></tr></tbody></table><p><strong>常用方法</strong></p><ul><li><strong>run():</strong> 用以表示线程活动的方法。</li><li><strong>start()</strong>:启动线程活动。</li><li><strong>join([time]):</strong> 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li><li><strong>isAlive():</strong> 返回线程是否活动的。</li><li><strong>getName():</strong> 返回线程名。</li><li><strong>setName():</strong> 设置线程名。</li></ul><p>直接创建 Thread ，将一个 callable 对象从类的构造器传递进去，这个 callable 就是回调函数，用来处理任务。比如以下例子，雇佣俩保姆，在同一时间做不同的事情</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">zuofan_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小红在%s做饭"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">xiyi_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小芳正在%s洗衣服"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    mythread1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>zuofan_time<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建线程</span>    mythread2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>xiyi_time<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建线程</span>    mythread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#启动线程</span>    mythread2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#启动线程</span><span class="token triple-quoted-string string">"""小红在13点08分07秒做饭小芳正在13点08分07秒洗衣服小红在13点08分08秒做饭小芳正在13点08分08秒洗衣服小红在13点08分09秒做饭小芳正在13点08分09秒洗衣服小芳正在13点08分10秒洗衣服小红在13点08分10秒做饭"""</span></code></pre><p>通过继承 Thread 类，我们可以自定义一个线程类，从而实例化该类对象，获得子线程。需要注意的是，在创建 Thread 类的子类时，必须重写从父类继承得到的 run() 方法。因为该方法即为要创建的子线程执行的方法，其功能如同第一种创建方法中的 action() 自定义函数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 保留原来threading.Thread中的初始化函数</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 重写run方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"线程开始："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        zuofan_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>delay<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"线程结束："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">zuofan_time</span><span class="token punctuation">(</span>threadname<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s开始做饭--%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threadname<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    td1 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#小红歇息一秒然后继续做饭</span>    td2 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"小芳"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#小芳歇息两秒然后继续做饭</span>    td1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    td2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""线程开始：小红线程开始：小芳小红开始做饭--16点46分02秒小芳开始做饭--16点46分03秒小红开始做饭--16点46分03秒小红开始做饭--16点46分04秒小红开始做饭--16点46分05秒小芳开始做饭--16点46分05秒小红开始做饭--16点46分06秒线程结束：小红小芳开始做饭--16点46分07秒小芳开始做饭--16点46分09秒小芳开始做饭--16点46分11秒线程结束：小芳"""</span></code></pre><h2 id="concurrent-futures"><a href="#concurrent-futures" class="headerlink" title="concurrent.futures"></a>concurrent.futures</h2><p>它提供异步执行回调高层接口，是对线程池和进程池的进一步封装，让开发者可以使用统一的接口非常容易的使用线程池和进程池。</p><p>还是以上面的为例子，当吃饭的人多了，两个保姆也不够用啦，怎么办？疯狂的开启线程？当然这是不可行的</p><pre class=" language-python"><code class="language-python">td1 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>td2 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"小芳"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>td3 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"小狗"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>td4 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"大黄"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>td5 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"阿狗"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>td6 <span class="token operator">=</span> Mythread<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>因为频繁的创建线程 销毁线程，非常的浪费资源；所以因该把他们放在一起，也就是线程池，通过线程池就可以重复利用线程，不会造成过多的浪费。在 python 中可以使用 <code>ThreadPoolExecutor</code> 来实现线程池。如下</p><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>创建线程池</p><p><code>ThreadPoolExecutor(max_workers=)</code>max_workers 参数来设置线程池中最多能同时运行的线程数目</p><p><code>submit(函数名(传递给函数的参数))</code>函数用来提交线程需要执行的任务到线程池中，并返回该任务的句柄（类似于文件、画图），注意 submit() 不是阻塞的，而是立即返回。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        zuofan_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>delay<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">zuofan_time</span><span class="token punctuation">(</span>threadname<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s开始做饭--%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threadname<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>zuofan_time<span class="token punctuation">(</span><span class="token string">'某某某'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token triple-quoted-string string">"""某某某1开始做饭--17点35分36秒某某某1开始做饭--17点35分37秒某某某1开始做饭--17点35分38秒某某某1开始做饭--17点35分39秒某某某1开始做饭--17点35分40秒某某某2开始做饭--17点35分41秒某某某2开始做饭--17点35分42秒某某某2开始做饭--17点35分43秒某某某2开始做饭--17点35分44秒某某某2开始做饭--17点35分45秒某某某3开始做饭--17点35分46秒某某某3开始做饭--17点35分47秒某某某3开始做饭--17点35分48秒某某某3开始做饭--17点35分49秒某某某3开始做饭--17点35分50秒某某某4开始做饭--17点35分51秒某某某4开始做饭--17点35分52秒某某某4开始做饭--17点35分53秒某某某4开始做饭--17点35分54秒某某某4开始做饭--17点35分55秒 """</span></code></pre><h3 id="ProcessPoolExecutor"><a href="#ProcessPoolExecutor" class="headerlink" title="ProcessPoolExecutor"></a>ProcessPoolExecutor</h3><p>创建进程池(进程数不需要大于内核数)</p><p>用法与上面那个方法相同</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Myprocess</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>        multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        zuofan_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>delay<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">zuofan_time</span><span class="token punctuation">(</span>processname<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s开始做饭--%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>processname<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>zuofan_time<span class="token punctuation">(</span><span class="token string">'某某某'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""某某某1开始做饭--19点06分06秒某某某1开始做饭--19点06分07秒某某某1开始做饭--19点06分08秒某某某1开始做饭--19点06分09秒某某某1开始做饭--19点06分10秒某某某2开始做饭--19点06分11秒某某某2开始做饭--19点06分12秒某某某2开始做饭--19点06分13秒某某某2开始做饭--19点06分14秒某某某2开始做饭--19点06分15秒"""</span></code></pre><h2 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h2><p>多进程操作模块，对多核CPU的利用率比Thread要好。</p><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p>Process 对象与 Thread 对象的用法相同。直接看例子吧，直接进行创建！</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">zuofan_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小红在%s做饭"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">xiyi_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小芳正在%s洗衣服"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    mythread1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>zuofan_time<span class="token punctuation">)</span>    mythread2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>xiyi_time<span class="token punctuation">)</span>    mythread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    mythread2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token triple-quoted-string string">"""小红在18点48分19秒做饭小芳正在18点48分19秒洗衣服小红在18点48分20秒做饭小芳正在18点48分21秒洗衣服小红在18点48分22秒做饭小芳正在18点48分22秒洗衣服小红在18点48分23秒做饭小芳正在18点48分23秒洗衣服 """</span></code></pre><p>创建子类，继承父类（Process），重写Run方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Myprocess</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>        multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 重写run方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进程开始："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        zuofan_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>delay<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进程结束："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">zuofan_time</span><span class="token punctuation">(</span>processname<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s开始做饭--%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>processname<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H点%M分%S秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    td1 <span class="token operator">=</span> Myprocess<span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#小红歇息一秒然后继续做饭</span>    td2 <span class="token operator">=</span> Myprocess<span class="token punctuation">(</span><span class="token string">"小芳"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#小芳歇息两秒然后继续做饭</span>    td1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    td2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""进程开始：小红进程开始：小芳小红开始做饭--18点56分26秒小红开始做饭--18点56分27秒小芳开始做饭--18点56分27秒小红开始做饭--18点56分28秒小红开始做饭--18点56分29秒小芳开始做饭--18点56分29秒小红开始做饭--18点56分30秒进程结束：小红小芳开始做饭--18点56分31秒小芳开始做饭--18点56分33秒小芳开始做饭--18点56分35秒进程结束：小芳"""</span></code></pre><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h3><p> Pool类可以提供指定数量的进程供用户调用，当有新的请求提交到Pool中时，如果池还没有满，就会创建一个新的进程来执行请求。如果池满，请求就会告知先等待，直到池中有进程结束，才会创建新的进程来执行这些请求。<code>Pool</code>默认大小是CPU的核数，我们也可以通过在<code>Pool</code>中传入<code>processes</code>参数即可自定义需要的核数量!也可以直接使用<code>multiprocessing.cpu_count()</code>获取当前CPU的数量，以此数量作为进程数。</p><p><strong>常用方法</strong></p><ul><li><strong>map()</strong>:函数原型：<code>map(func, iterable[, chunksize=None])</code>Pool类中的map方法，与内置的map函数用法行为基本一致，它会使进程阻塞直到结果返回-注意：虽然第二个参数是一个迭代器，但在实际使用中，必须在整个队列都就绪后，程序才会运行子进程</li><li><strong>close()</strong>:关闭进程池（pool），使其不再接受新的任务</li><li><strong>terminal()</strong>:结束工作进程，不再处理未处理的任务</li><li><strong>join()</strong>:主进程阻塞等待子进程的退出， join方法要在close或terminate之后使用</li></ul><p>爬取豆瓣Top200的电影，不使用多进程</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupstart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_douban</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0'</span>        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取豆瓣Top200的电影===>"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取失败"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_result</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">:</span>    lists <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"grid_view"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        index_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        movies_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        score_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"rating_num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        description_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"inq"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">+</span> index_name <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> movies_name <span class="token operator">+</span> <span class="token string">'||'</span> <span class="token operator">+</span> <span class="token string">"评分:"</span> <span class="token operator">+</span> score_name <span class="token operator">+</span> <span class="token string">'|'</span> <span class="token operator">+</span> <span class="token string">"描述:"</span> <span class="token operator">+</span> description_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/top250?start="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>page <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;filter="</span>    html <span class="token operator">=</span> get_douban<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    movies <span class="token operator">=</span> parse_result<span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token string">"执行完成的时间是：1.892416000366211"</span></code></pre><p>使用多进程后，效率一下就上来啦。。。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_douban</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0'</span>        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取豆瓣Top200的电影===>"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取失败"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_result</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">:</span>    lists <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"grid_view"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        index_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        movies_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        score_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"rating_num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        description_name <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"inq"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">+</span> index_name <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> movies_name <span class="token operator">+</span> <span class="token string">'||'</span> <span class="token operator">+</span> <span class="token string">"评分:"</span> <span class="token operator">+</span> score_name <span class="token operator">+</span> <span class="token string">'|'</span> <span class="token operator">+</span> <span class="token string">"描述:"</span> <span class="token operator">+</span> description_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> get_douban<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    movies <span class="token operator">=</span> parse_result<span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/top250?start="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;filter="</span>        urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>main<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token string">"执行完成后的时间为：0.30734753608703613"</span></code></pre><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>时间处理的模块</p><h3 id="time-1"><a href="#time-1" class="headerlink" title="time()"></a>time()</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""返回当前时间戳 运行结果 1591867153.6124237"""</span><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>线程推迟指定的时间运行。单位为秒。</p><pre class=" language-python"><code class="language-python"><span class="token string">"每过两秒打印一个数字"</span><span class="token keyword">import</span> timea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h3 id="localtime"><a href="#localtime" class="headerlink" title="localtime()"></a>localtime()</h3><p>以时间元祖(struct_time)的形式返回</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>struct_time<span class="token punctuation">(</span>tm_year<span class="token operator">=</span><span class="token number">2020</span><span class="token punctuation">,</span> tm_mon<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> tm_mday<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> tm_hour<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">,</span> tm_min<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span> tm_sec<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> tm_wday<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> tm_yday<span class="token operator">=</span><span class="token number">163</span><span class="token punctuation">,</span> tm_isdst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime()"></a>strftime()</h3><p>根据时间元组的形式格化为字符形式</p><pre class=" language-python"><code class="language-python">    <span class="token operator">%</span>A      本地完整星期名称    <span class="token operator">%</span>b      本地简化月份名称    <span class="token operator">%</span>B      本地完整月份名称    <span class="token operator">%</span>c      本地相应的日期和时间表示    <span class="token operator">%</span>d      一个月中的第几天<span class="token punctuation">(</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">)</span>    <span class="token operator">%</span>H      一天中的第几个小时<span class="token punctuation">(</span><span class="token number">24</span>小时制，<span class="token number">00</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span>    <span class="token operator">%</span>l      一天中的第几个小时<span class="token punctuation">(</span><span class="token number">12</span>小时制，<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token operator">%</span>j      一年中的第几天<span class="token punctuation">(</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">366</span><span class="token punctuation">)</span>    <span class="token operator">%</span>m      月份<span class="token punctuation">(</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token operator">%</span>M      分钟数<span class="token punctuation">(</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span><span class="token punctuation">)</span>    <span class="token operator">%</span>p      本地am或者pm的相应符    <span class="token operator">%</span>S      秒<span class="token punctuation">(</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">)</span>    <span class="token operator">%</span>U      一年中的星期数<span class="token punctuation">(</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">,</span>星期天是一个星期的开始<span class="token punctuation">,</span>第一个星期天之前的所有天数都放在第０周<span class="token punctuation">)</span>    <span class="token operator">%</span>w      一个星期中的第几天<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span>是星期天<span class="token punctuation">)</span>    <span class="token operator">%</span>W      和<span class="token operator">%</span>U基本相同，不同的是<span class="token operator">%</span>W以星期一为一个星期的开始    <span class="token operator">%</span>x      本地相应日期    <span class="token operator">%</span>X      本地相应时间    <span class="token operator">%</span>y      去掉世纪的年份<span class="token punctuation">(</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">)</span>    <span class="token operator">%</span>Y      完整的年份        </code></pre><p>例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">"2020-06-11 17:37:22"</span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><p>可创建一个整数列表</p><p>函数语法</p><pre class=" language-python"><code class="language-python">range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop step<span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><p><strong>示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token string">"输出1 2 3 4 5 6 7 8 9"</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/06/06/linux-chang-yong-ming-ling/"/>
      <url>/2020/06/06/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常见函数记录</title>
      <link href="/2020/06/03/php-chang-jian-han-shu-ji-lu/"/>
      <url>/2020/06/03/php-chang-jian-han-shu-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="isset"><a href="#isset" class="headerlink" title="isset()"></a>isset()</h2><p>判断变量是否设置且不为NULL，变量存在且不为NULL返回true，变量存在值为NULL返回false，变量不存在返回false。如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><p>判断变量是否为空，变量不存在返回true，当变量存在并且值非空非0返回false，否则返回true; empty() 本质上与 !isset($var) || $var == false 等价!</p><p>以下的东西被认为是空的返回ture：</p><ul><li>“” (空字符串)</li><li>0 (作为整数的0)</li><li>0.0 (作为浮点数的0)</li><li>“0” (作为字符串的0)</li><li>NULL</li><li>FALSE</li><li>array() (一个空数组)</li><li>$var; (一个声明了，但是没有值的变量)</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$e</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><h2 id="get-magic-quotes-gpc"><a href="#get-magic-quotes-gpc" class="headerlink" title="get_magic_quotes_gpc()"></a>get_magic_quotes_gpc()</h2><p>获取php的环境变量magic_quotes_gpc的值，如果值为1时表示开启，为0时表示关闭。开启时php会自动为POST，GET，COOKIE传过来的参数值自动增加转义字符<code>\</code>在 PHP 5.4.0 起将始终返回 <strong><code>FALSE</code></strong>。</p><h2 id="stripslashes"><a href="#stripslashes" class="headerlink" title="stripslashes()"></a>stripslashes()</h2><p>删除转义字符<code>\</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token string">"hello \word"</span><span class="token punctuation">)</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>hello word</code></pre><h2 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h2><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"hello w'ord"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>hello w'ordhello w\'ord</code></pre><h2 id="ctype-digit"><a href="#ctype-digit" class="headerlink" title="ctype_digit()"></a>ctype_digit()</h2><p>检测字符串中是否都为数字，为数字返回true，不为数字时返回false，负数和小数不会通过，参数一定是字符串，如果不是字符串返回false。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token string">"a1b2c3"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string()"></a>mysql_real_escape_string()</h2><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</p><p>下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a </li></ul><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</p><p>可使用本函数来预防数据库攻击</p><pre class=" language-php"><code class="language-php"></code></pre><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><p>用于获取变量的整数值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">6.6</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">6.2</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string">'6.5'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">666</span></code></pre><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h2><p>用于执行一个正则表达式的搜索匹配和替换</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"hello123andANDword"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/\d/'</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替换123为空格</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/and/i'</span><span class="token punctuation">,</span><span class="token string">"or"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替换and为or ‘i’忽略大小写</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>hello   andANDwordhello123ororword</code></pre><h2 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h2><p>替换字符串</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'word'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token string">'hello word'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>hello world</code></pre><h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><p>移除字符串两侧的空白字符或其他预定义字符</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'hello word'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">'hd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>ello wor</code></pre><h2 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags()"></a>strip_tags()</h2><p>函数剥去字符串中的 HTML、XML 以及 PHP 的标签。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token string">"Hello &lt;b>world!&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>Hello world<span class="token operator">!</span></code></pre><h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h2><p>把预定义字符转换为HTML实体</p><p>预定义的字符是：</p><ul><li>&amp; （和号）成为 &amp;amp;</li><li>“ （双引号）成为 &amp;quot;</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &amp;lt;</li><li>&gt; （大于）成为 &amp;gt;</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"This is some &lt;b>chihiro&lt;/b> text."</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>This is some <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>b<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>chihiro<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>b<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> text<span class="token punctuation">.</span></code></pre><h2 id="fnmatch"><a href="#fnmatch" class="headerlink" title="fnmatch()"></a>fnmatch()</h2><p>检查字符串或文件名是否与给定的通配符模式匹配。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string">"hello word"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fnmatch</span><span class="token punctuation">(</span><span class="token string">"hello *"</span><span class="token punctuation">,</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Welcome"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>Welcome</code></pre><h2 id="die"><a href="#die" class="headerlink" title="die()"></a>die()</h2><p>该函数输出一条消息，并退出当前脚本。</p><h2 id="PHP超全局变量"><a href="#PHP超全局变量" class="headerlink" title="PHP超全局变量"></a>PHP超全局变量</h2><h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h3><p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量的名字就是数组的键。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">100</span></code></pre><h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h3><p>$_SERVER这种超全局变量保存关于报头、路径和脚本位置的信息。下表列出了您能够在 $_SERVER 中访问的最重要的元素：</p><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td>$_SERVER[‘PHP_SELF’]</td><td>返回当前执行脚本的文件名。</td></tr><tr><td>$_SERVER[‘GATEWAY_INTERFACE’]</td><td>返回服务器使用的 CGI 规范的版本。</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>返回当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td>$_SERVER[‘SERVER_NAME’]</td><td>返回当前运行脚本所在的服务器的主机名</td></tr><tr><td>$_SERVER[‘SERVER_SOFTWARE’]</td><td>返回服务器标识字符串（比如 Apache/2.2.24）。</td></tr><tr><td>$_SERVER[‘SERVER_PROTOCOL’]</td><td>返回请求页面时通信协议的名称和版本（例如，“HTTP/1.0”）。</td></tr><tr><td>$_SERVER[‘REQUEST_METHOD’]</td><td>返回访问页面使用的请求方法（例如 POST）。</td></tr><tr><td>$_SERVER[‘REQUEST_TIME’]</td><td>返回请求开始时的时间戳（例如 1577687494）。</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>返回查询字符串，如果是通过查询字符串访问此页面。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT’]</td><td>返回来自当前请求的请求头。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td><td>返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</td></tr><tr><td>$_SERVER[‘HTTP_HOST’]</td><td>返回来自当前请求的 Host 头。</td></tr><tr><td>$_SERVER[‘HTTP_REFERER’]</td><td>返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</td></tr><tr><td>$_SERVER[‘HTTPS’]</td><td>是否通过安全 HTTP 协议查询脚本。</td></tr><tr><td>$_SERVER[‘REMOTE_ADDR’]</td><td>返回浏览当前页面的用户的 IP 地址。</td></tr><tr><td>$_SERVER[‘REMOTE_HOST’]</td><td>返回浏览当前页面的用户的主机名。</td></tr><tr><td>$_SERVER[‘REMOTE_PORT’]</td><td>返回用户机器上连接到 Web 服务器所使用的端口号。</td></tr><tr><td>$_SERVER[‘SCRIPT_FILENAME’]</td><td>返回当前执行脚本的绝对路径。</td></tr><tr><td>$_SERVER[‘SERVER_ADMIN’]</td><td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</td></tr><tr><td>$_SERVER[‘SERVER_PORT’]</td><td>Web 服务器使用的端口。默认值为 “80”。</td></tr><tr><td>$_SERVER[‘SERVER_SIGNATURE’]</td><td>返回服务器版本和虚拟主机名。</td></tr><tr><td>$_SERVER[‘PATH_TRANSLATED’]</td><td>当前脚本所在文件系统（非文档根目录）的基本路径。</td></tr><tr><td>$_SERVER[‘SCRIPT_NAME’]</td><td>返回当前脚本的路径。</td></tr><tr><td>$_SERVER[‘SCRIPT_URI’]</td><td>返回当前页面的 URI。</td></tr></tbody></table><h3 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h3><p>$_GET 变量用于收集来自 method=”get” 的表单中的值。从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    名字: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    年龄: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>hello.php文件</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h3 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h3><p>$_POST 变量用于收集来自 method=”post” 的表单中的值。从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。<strong>注释：</strong>然而，默认情况下，POST 方法的发送信息的量最大值为 8 MB（可通过设置 php.ini 文件中的 post_max_size 进行更改）</p><h3 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h3><p>$_REQUEST 变量包含了 $_GET、$_POST 和 $_COOKIE 的内容。$_REQUEST 变量可用来收集通过 GET 和 POST 方法发送的表单数据。但是$_REQUEST比较慢。通过POST和GET方法提交的所有数据都可以通过$_REQUEST数组获得</p><h3 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION"></a>$_SESSION</h3><p>存储和取回 session 变量</p><p>在您把用户信息存储到 PHP session 中之前，首先必须启动会话。</p><p><strong>注释：</strong>session_start() 函数必须位于 &lt;html&gt; 标签之前</p><pre class=" language-php+HTML"><code class="language-php+HTML"><?phpsession_start();// 存储 session 数据$_SESSION['page']=6;?><html><head><meta charset="utf-8"><title>Chihiro</title></head><body><?php// 检索 session 数据echo "页数：". $_SESSION['page'];?></body></html></code></pre><p>如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。session_destroy() 将重置 session，您将失去所有已存储的 session 数据。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>手动分割<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token delimiter">&lt;?php</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h3 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h3><p>通过 PHP，可以把文件上传到服务器。</p><p>第一个参数是表单的 input name，第二个下标可以是 “name”, “type”, “size”, “tmp_name” 或 “error”。就像这样：</p><ul><li>$_FILES[“file”][“name”] - 被上传文件的名称</li><li>$_FILES[“file”][“type”] - 被上传文件的类型</li><li>$_FILES[“file”][“size”] - 被上传文件的大小，以字节计</li><li>$_FILES[“file”][“tmp_name”] - 存储在服务器的文件的临时副本的名称</li><li>$_FILES[“file”][“error”] - 由文件上传导致的错误代码</li></ul><p>示例：</p><pre class=" language-php+HTML"><code class="language-php+HTML"></code></pre><h2 id="define"><a href="#define" class="headerlink" title="define()"></a>define()</h2><p> 函数定义一个常量</p><p>常量类似变量，不同之处在于：</p><ul><li>在设定以后，常量的值无法更改</li><li>常量名不需要开头的美元符号 ($)</li><li>作用域不影响对常量的访问</li><li>常量值只能是字符串或数字</li></ul><p>语法:</p><pre class=" language-php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'常量名'</span><span class="token punctuation">,</span><span class="token string">'常量的值'</span><span class="token punctuation">,</span>规定常量的名称是否对大小写敏感<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h2><h2 id="require"><a href="#require" class="headerlink" title="require()"></a>require()</h2><p><strong>include 和 require 除了处理错误的方式不同之外，在其他方面都是相同的：</strong></p><ul><li>require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件；</li><li>include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程</li><li><strong>require_once</strong> 语句和 require 语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含，只加载文件一次。</li><li><strong>include_once</strong>语句在脚本执行期间包含并运行指定文件。此行为和  <a href="https://www.php.net/manual/zh/function.include.php" target="_blank" rel="noopener">include</a>  语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。如同此语句名字暗示的那样，只会包含一次</li></ul><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">include</span> <span class="token string">'filename'</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string">'filename'</span><span class="token punctuation">;</span></code></pre><h2 id="php-uname"><a href="#php-uname" class="headerlink" title="php_uname()"></a>php_uname()</h2><p>php_uname()返回了运行 PHP 的操作系统的描述</p><p>说明：</p><pre class=" language-php"><code class="language-php"><span class="token function">php_uname</span> <span class="token punctuation">(</span><span class="token punctuation">[</span> string <span class="token variable">$mode</span> <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><pre><code>mode</code></pre><p>​    <strong>mode</strong> 是单个字符，用于定义要返回什么信息：       </p><ul><li><em>‘a’*：此为默认。包含序列 *”s n r v m”</em> 里的所有模式。 </li><li><em>‘s’</em>：操作系统名称。例如：Linux。                 </li><li><em>‘n’</em>：主机名。例如：          <em>localhost.example.com</em>。                 </li><li><em>‘r’</em>：版本名称，例如：          <em>5.1.2-RELEASE</em>。                 </li><li><em>‘v’</em>：版本信息。操作系统之间有很大的不同。                 </li><li><em>‘m’</em>：机器类型。例如：<em>i386</em>。                 </li></ul><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">php_uname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#只是获取操作系统的名称，可以考虑使用常量PHP_OS</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>Linux parrot <span class="token number">5.5</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>1parrot1<span class="token operator">-</span>amd64 <span class="token shell-comment comment">#1 SMP Parrot 5.5.17-1parrot1 (2020-04-25) x86_64</span>Linux</code></pre><h2 id="stristr"><a href="#stristr" class="headerlink" title="stristr()"></a>stristr()</h2><p>搜索字符串在另一字符串中的第一次出现。</p><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token function">stristr</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>search<span class="token punctuation">,</span>before_search<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定被搜索的字符串。</td></tr><tr><td><em>search</em></td><td>必需。规定要搜索的字符串。 如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符。</td></tr><tr><td><em>before_search</em></td><td>可选。默认值为 “false” 的布尔值。 如果设置为 “true”，它将返回 <em>search</em> 参数第一次出现之前的字符串部分。</td></tr></tbody></table><p>例子 1</p><p>以 “o” 的 ASCII 值搜索字符串，并返回字符串的剩余部分：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>o world<span class="token operator">!</span></code></pre><p>例子 2</p><p>返回 “world” 第一次出现之前的字符串部分：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">,</span><span class="token string">"WORLD"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>Hello </code></pre><h2 id="stripos"><a href="#stripos" class="headerlink" title="stripos()"></a>stripos()</h2><p>查找字符串在另一字符串中第一次出现的位置（不区分大小写）。</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'192.168.31.58'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token string">"192.168.31.66"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">5</span></code></pre><h2 id="strrpos"><a href="#strrpos" class="headerlink" title="strrpos()"></a>strrpos()</h2><p>计算指定字符串在目标字符串中最后一次出现的位置</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token string">"hello word;hello world"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">17</span></code></pre><h2 id="strtolower"><a href="#strtolower" class="headerlink" title="strtolower()"></a>strtolower()</h2><p>把所有字符转换为小写。</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token string">"Hello WORLD."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>hello world<span class="token punctuation">.</span></code></pre><h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h2><p>shell_exec()函数是PHP中的一个内置函数，用于通过shell执行命令并以字符串的形式返回完整的输出。</p><pre class=" language-php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token variable">$cmd</span> <span class="token punctuation">)</span></code></pre><p>参数：此函数接受单个参数$cmd，该参数用于保存将要执行的命令。</p><p>返回值：此函数返回已执行的命令，如果发生错误则返回NULL。</p><p>注意：当PHP以安全模式运行时，将禁用此功能。</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>hello<span class="token punctuation">.</span>htmlhello<span class="token punctuation">.</span>php</code></pre><p>可以使用使用如下命令连接符号来拼接自己的命令</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>A;B</td><td>A 不论正确与否都会执行 B 命令</td></tr><tr><td>A&amp;B</td><td>A 后台运行，A 和 B 同时执行</td></tr><tr><td>A&amp;&amp;B</td><td>A 执行成功时候才会执行 B 命令</td></tr><tr><td>A|B</td><td>A 执行的输出结果，作为 B 命令的参数，A 不论正确与否都会执行 B 命令</td></tr><tr><td>A||B</td><td>A 执行失败后才会执行 B 命令</td></tr></tbody></table><h2 id="array-keys"><a href="#array-keys" class="headerlink" title="array_keys()"></a>array_keys()</h2><p>返回包含数组中所有键名的一个新数组：</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"Chihiro"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"18"</span><span class="token punctuation">,</span><span class="token string">"color"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//运行结果</span><span class="token keyword">Array</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> name    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> age    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> color<span class="token punctuation">)</span></code></pre><p>可以用来过滤多个危险字符</p><pre class=" language-php"><code class="language-php"><span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>  <span class="token string">'&amp;&amp;'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token string">';'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 移除黑名单字符</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="explode"><a href="#explode" class="headerlink" title="explode()"></a>explode()</h2><p>explode() 函数把字符串打散为数组。</p><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token function">explode</span><span class="token punctuation">(</span>separator<span class="token punctuation">,</span>string<span class="token punctuation">,</span>limit<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>必需。规定在哪里分割字符串。</td></tr><tr><td>string</td><td>必需。要分割的字符串。</td></tr><tr><td>limit</td><td>可选。规定所返回的数组元素的数目。 可能的值：  大于 0 - 返回包含最多 <em>limit</em> 个元素的数组 小于 0 - 返回包含除了最后的 -<em>limit</em> 个元素以外的所有元素的数组 0 - 返回包含一个元素的数组</td></tr></tbody></table><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//以.作为分割符号。分割$a</span><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'192.168.31.58'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token keyword">Array</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">168</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">31</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">58</span><span class="token punctuation">)</span></code></pre><h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h2><p>检测变量是否为数字或数字字符串</p><p>描述：</p><pre class=" language-php"><code class="language-php"><span class="token function">is_numeric</span> <span class="token punctuation">(</span> mixed <span class="token variable">$var</span> <span class="token punctuation">)</span></code></pre><p>如果 <code>var</code> 是数字和数字字符串则返回 <strong><code>TRUE</code></strong>，否则返回 <strong><code>FALSE</code></strong>。</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'192.168.31.58'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Welcome"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>Welcome</code></pre><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof()"></a>sizeof()</h2><p>返回数组中元素的数目。</p><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'192.168.31.58'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">4</span></code></pre><h2 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h2><p>截取字符串。</p><p>语法</p><pre class=" language-php"><code class="language-php"><span class="token function">substr</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要返回其中一部分的字符串。</td></tr><tr><td><em>start</em></td><td>必需。规定在字符串的何处开始。  正数 - 在字符串的指定位置开始 负数 - 在从字符串结尾开始的指定位置开始 0 - 在字符串中的第一个字符处开始</td></tr><tr><td><em>length</em></td><td>可选。规定被返回字符串的长度。默认是直到字符串的结尾。  正数 - 从 <em>start</em> 参数所在的位置返回的长度 负数 - 从字符串末端返回的长度</td></tr></tbody></table><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"hello word"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>llolo word</code></pre><h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h2><p>用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p><h2 id="uniqid"><a href="#uniqid" class="headerlink" title="uniqid()"></a>uniqid()</h2><p>uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。</p><p>语法</p><pre class=" language-php"><code class="language-php"><span class="token function">uniqid</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span>more_entropy<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>prefix</em></td><td>可选。为 ID 规定前缀。如果两个脚本恰好在相同的微秒生成 ID，该参数很有用。</td></tr><tr><td><em>more_entropy</em></td><td>可选。规定位于返回值末尾的更多的熵。</td></tr></tbody></table><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//运行结果</span>5edb179e0cceb5edb179e0ccf8</code></pre>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
